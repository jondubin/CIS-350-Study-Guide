#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+TAGS: @reading

* CIS 350 Final
75 point exam. 120 minutes. Double sided study sheet

* First Half (25%)
** TODO Software Process Models
** TODO Agile
** TODO Software Configuration Management
** TODO Requirements Gathering and Coumentation
** TODO Requirement Analysis
** TODO Software Architecture
** TODO Design Concepts
** TODO Design Patterns

* Second Half (75%)
** DONE Usability and UI
   - Why is usability important?
     - *Therac-25* case study
       - Radiation therapy machine involved in at least 6 accidents
         between 1985-1987
       - patients were give massive overdoses of radiation
       - It moved some safety features from hardware to software
       - Software from the older version (Therac-20) was reused and
         was assumed to be workign correctly
       - *Hamilton, Ontario, July 1985*
         - During treatment, machine stopped and reported "no dose"
         - This was a common occurence, so the technician pressed "P"
           to proceed and re-deliver the dose
         - This happened four more times, after which the machine went
           into suspend mode
         - Patient received 5x dose and died four months later
       - In Tyler Texas (1986) a technician reported "Malfunction 54"
         which did not exist in the user manuel
         - the operator had requested 202 units, but only 6 were
           delivered and the patient died five months later
         - the manufacturer could not reproduce this bug so the
           machine was put back into service
         - Malfunction 54 happened again five weeks later and another
           patient died
   - Definition of usability: *Five E's*
     - Effective
     - Efficient
     - Engaging
     - Error Tolerant
     - Easy to learn
   - User-centered design
     - Persona
       - Who are the users?
       - What do they know
       - What is their motiviation?
     - Scenario
       - What do they want to do?
       - What else are they doing?
       - What are their expectations?
     - needs, wants, and limitations of end users are given extensive attention
   - Information visualization and metaphors
     - How information is represented
     - Comp sci + cog psychology
     - Human processor model: perception pipeline
     - Metaphor: agreed upon constructs that related to important and
       significance
       - Indicates which data is more important and guide user's attentuon
   - Measuring usability: studies, heuristics, metrics
     - *Heuristics*
       - general guidelines or widely accepted "best practices"
       - Nielsen's usability heuristics
         - Match between system and real world (skeumorphism)
         - Consistency and standards
         - Help and documentation
         - User control and freedom
         - visibility of system status
         - Flexibility and efficiency of use
         - error prevention
         - recognition rather than recall
         - recognize/diagnose erros
         - aesthetic and minimalist design
     - *Usability studies*
       - observe people using the system under normal circumstances
       - methods
         - surveys: many saying
         - focus groups: few saying
         - ethnography (field observation): many doing
         - observation in controlled setting: few doing
     - *Metrics*
       - measure quantitative aspects such as time to complete a task,
         error rate, memorability, etc.
       - Nielsen's usability heuristics:
         - Match between system and real world
         - Consistency and standards
         - Help and documentation
         - User control and freedom
         - Visibility of system status
         - Flexibiltiy and efficiency
         - Error prevention
         - Recognition rather than recall
         - Recognize/diagnose errors
         - Aesthetic and minimalist design
       - Task analysis - how easy is it to accomplish something?
         - *Hierarchical Task Analysis (HTA)*
           - task is broken down into goals and subgoals
         - *Cognitative Task Analysis (CTA)*
           - also includes cognitative study (time spent thinking about what to do)
     - *Human Reliability Assessment* (HRA)
       - error rate: how often does the user make a mistake
       - cognitive load: how much can the user keep in his mind during a task?
       - memorability: how much does the user remember?
** DONE Integration
   - individual software modules are combined and *tested as a
     group*. occurs after unit testing
   - *Big-bang integration*
     - write everything and hope
     - all components are integrated simultaneously, after which
       everything is tested as a whole
   - *Top-down integration*
     - testing conducted from main module to sub module. If the sub
       module is not developed then it is replaced by a temporary
       program called a stub
   - *Bottom-up integration*
     - lowest level components are tested first.
     - they are then used to facilitate the testing of higher level
       components
** DONE Test Driven Development and Defensive Drogramming
   - *Test Driven Development*
     - write test cases *first*
     - then write minimum amount of code to pass the test
     - finally refactor the code to acceptable standards
   - *Defensive Programing*
     - /McConnell, Code Complete, ch. 8/ :reading:
       - the recognition that programs will have problems and
         modifications, and that a smart programmer will develop code
         accordingly.
       - Protecting program from *invalid inputs*
       - Protect against mistakes programmer mistakes
       - *Error handling* - what happens if you get bad input?
         - Do nothing: garbage in, garbage out
         - Notify the caller: garbage in, error out
         - Shut it down: garbage in, nothing out
       - *Assertions*
         - code used during development that allows a program to check
           itself as it runs
         - use error-handling code for conditions you expect to occur,
           use assertions for conditions that should never occur
       - *Exceptions*
         - a specific means by which code can pass along errors or
           exceptional events to teh cade that called it
         - try/catch in java
       - [ ] Error code vs assertions vs exceptions
   - /Hunt & Thomas, Pragmatic Programmer, ch. 4/ :reading:
     - *Design by Contract*
       - documenting the rights and responsibilities of software
         modules to ensure program correctness.
       - *Preconditions*: a routines requirements
       - *Postconditions*: what the routine is guaranteed to do; the
         state of the world when the routine is done
       - *Class invariants*: A class ensures that this condition is
         always true from teh perspective of the caller.
     - Implementing DBC
       - Can partially emulate contracts with *assertions*, but
         assertions don't propogate down an inheritance hierarchy.
       - Some languages have built in support for DBC (like Eiffel)
     - Use exceptions rarely, for unexpected events.
** DONE Analyzability (readability, understandability)
   - *Readability*: ease with which reader can identify and
     differentiate tokens and their syntactic meaning
   - *Understandability*: ease with which reader can determine the
     semantic meaning of a piece of code
   - Affected by: whitespace, punctuation, coding covnentions,
     variable names, number of paths, decision points
   - /Boswell, The Art of Readable Code, ch. 2-3/
     - *Packing Information into Names*
       - *choose specific words*. =Size()= vs =Height()=,
         =NumNodes()=, =MemoryBytes()=
       - *Avoid generic names* like =tmp= and =retval=* unless there
         is a reason
       - *Prefer concrete names over abstract names* -
         =ServerCanStart()= vs =CanListenOnPort()=
       - *Attaching extra information to a name*
         - Values with units: =delay= vs =delay_secs=
         - other examples
           - =password= vs =plaintext_password=
           - =html= vs =html_utf8=
       - *Use longer names for larger scopes*
       - *Use capitalization, underscores, etc. in a meaningful way*
     - *The best names* are ones that can't be misconstrued
** DONE Concurrency & Synchronization
   - Early computers could only run one program at a time
   - How do we continue increasing speed if Moore's law slows down?
   - *Process-level Parallelism*
     - Early computers ran one program at a time
     - *Multi-programming* operating systems (1970s) made it appear as
       if multiple programs were running simultaneously
   - *Instruction-Level Parallelism*
     - rather than wait for an instruction to finish, start the next
       one asap
     - *pipelining*: fetch/decode one instruction while executing another
   - *Thread-Level Parallelism*
     - now we have threads, which allow programs to do more than one
       thing at a time
     - *In Java*
       - each thread has it's own stack (local vars, method args) and
         program counter
       - threads in the same process share a heap (object storage) and
         static variables
       - Defining and starting a Thread
         #+BEGIN_SRC java
            public class HelloRunnable implements Runnable {

                public void run() {
                    System.out.println("Hello from a thread!");
                }

                public static void main(String args[]) {
                    (new Thread(new HelloRunnable())).start();
                }
            }
          #+END_SRC
       - [ ] Threads can make code slower... how?
       - A *Race Condition* occurs when two or more threads can access
         shared data and they try to change it at the same time.
   - *Synchronization techniques*
     - *synchronized methods*
       - in java use the =synchronized= keyword
       - it is not possible for two invocations of synchronized methods
         on the same object to interleave
       - when a synchronized method exits, it establisheds a
         happens-before relationship with any subsequent invocation of a
         synchronized method for the same object. This guarantees that
         the changes to the state of the object are visible to all
         threads.
     - *syncrhonized block*: you don't have to synchronize a whole method
       #+BEGIN_SRC java
       public void add(int value){

           synchronized(this){
               this.count += value;
           }
       }
       #+END_SRC
     - *Lock Objects* are a more sophisticated synchronization method
       #+BEGIN_SRC java
       public class Counter{

           private Lock lock = new Lock();
           private int count = 0;

           public int inc(){
               lock.lock();
               int newCount = ++count;
               lock.unlock();
               return newCount;
           }
       }
       #+END_SRC
     - *Semaphores*
       - A semaphore maintains a set of *permits*.
       - the =acquire()= method blocks until a permit is available and
         then takes it.
       - the =release()= method adds a permit, potentially releasing a
         blocking acquirer
       - semaphores are often used to *restrict* the number of threads
         that can access some resource
** DONE Efficiency and Performance
   - *Tradeoffs* of code optimization
     - an optimized program can rely on using more elaborate
       algorithms, and may be more difficult to comprehend than an
       unoptimized
     - focusing on optimization (prematurely) can detract from
       achieving other program objectives.
   - *Rules of thumb*
     - use the right algorithm or data structure
     - Measure, don't guess
     - don't unnecessarily create objects
     - don't do unnecessary work
       - for example, reducing the lines of code in a high-level
         language does not improve the speed or size of the resulting
         machine code
   - *Common sources of inefficiency*
     - *I/O operations*: in-memory data structures are much faster and
       should be used unless space is critical.
     - *System Calls* are often expensive.
   - *Lazy evaluation and instantiation*
     - avoids doing work until the work is needed.
   - *Loops*
     - *Unswitching*
       - refers to making a decision inside a loop every time it's
         executed. If the decision doesn't change while the loop is
         executing, put it on the outside of the loop. This involves
         turning the loop inside out and putting loops inside the
         conditional rather than the conditional inside the loop.
     - *Jamming*
       - the result of combining two loops that operate on the same
         set of elements.
     - *Unrolling*
       - reduces the amount of loop housekeeping.
       - to unroll a loop you handle two or more cases in each pass
         through the loop instead of just one.
       - This hurts readability in the source code
         #+BEGIN_SRC java
         i = 0;
         while (i < count - 1) {
             a[i] = i;
             a[i + 1] = i + 1;
             i = i + 2
         }

         if (i == count - 1) {
             a[count - 1] = count - 1;
         }
         #+END_SRC
       - Increases size of te compiled code
       - In this example the if statement picks up the case that might
         fall through the cracks if =count= is an odd number.
     - *Minimizing the work inside of loops*
       - if you can evaluate statments outside of the loop so that
         only the result is used inside, do that.
     - *Sentinel Values*
       - When you have a loop with a compound test, you can save time
         by simplifying the test.
       - If the loop is a search loop you can use a sentinel value,
         which is a value that you put just past the end of the search
         range that's guaranteed to terminate the search.
     - *Putting the busiest loop on the inside*
     - *Strength Reduction*
       - replacing expensive operations with cheaper operations
       - ex. replace multiplication with addition.
   - *Data Transformations*
     - Changes in data types can reduce program size and improve
       speed.
     - Integers operations tend to be faster than floating points.
     - Use the fewest array dimensions possible
     - Minimize array references
     - Use supplementary indexes
       - add related data that makes accessing a data type more
         efficient.
   - *Memoization*
     - a technique for storing values of a function instead of
       recomputing them each time the function is called.
   - *Expressions*
     - algebraic identities can be used to replace costly operations
       with cheaper ones.
       - Replace multiplication with additions
       - Replace exponentiation with multiplication
       - Replace trig routines with trig identities
       - Replace floating-point numbers with ints
       - etc.
** DONE Code Smells and Refactoring
   - *Refactoring*
     - a technique for cleaning up code in a more efficient and
       controlled manner
     - *Purposes*
       - to improve the design of software
       - to make software easier to understand
       - to help find bugs
       - to help you program faster
     - *When to refactor*
       - when you add function
       - when you need to fix a bug
       - as you do a code review
   - *Code Smells*
     - *Duplicated Code*
       - /Extract Method, Extract Class/
     - *Long Method*
       - /Extract Method/
     - *Large Class*
       - /Extract Class, Extract Subclass/
     - *Long Parameter List*
       - /Replace Parameter with Method/
         - when you can get the data in one parameter by making a
           request of an object that you already know about.
       - /Preserve Whole Object/
         - to take a bunch of data gleaned form an object and replace
           it with the object itself.
       - /Introduce Parameter Object/
         - to group several data items into a logical object
     - *Divergent Change*
       - when one class is commonly changed in different ways for
         different reasons.
       - "Well, I will have to change these methods every time I get a
         new database..."
       - Identify everything that changes for a particular case and
         use /Extract Class/ to put them all together.
     - *Shotgun Surgery*
       - opposite of divergent change.
       - when every time you make a kind of change, you have to make a
         lot of little changes to a lot of different classes.
       - Use /Move Method/ and /Move Field/ to put all of the changes
         into a single class.
       - Often you can use /Inline Class/ to bring a bunch of behavior
         together
       - This may result in Divergent Change
     - *Feature Envy*
       - a method that seems more interested in a class other than the
         one it actually is in.
       - use /Move Method/ to move the method to where it should be
       - sometimes only part of the method suffers from envy, so use
         /Extract Method/ then /Move Method/ to give it a better home.
     - *Data Clumps*
       - bunches of data that hang around together should be made into
         their own object.
       - use /Extract Class/ on the fields to turn these clumps into
         classes.
       - use /Introduce Parameter Object/ or /Preserve Whole Object/
         to slim them down.
     - *Primitive Obsession*
       - using too many primitive types rather than records
       - use /Replace Data Value with Object/
     - *Switch Statements*
       - consider polymorphism
       - use /Extract Method/ to extract the switch statement and then
         /Move Method/ to get it onto the class where the polymorphism
         is needed.
       - then either /Replace Type Code with Subclasses/ or /Replace
         Type Code with State or Strategy/
       - then /Replace Conditional with Polymorphism/
     - *Parallel Inheritance Hierarchies*
       - special case of shotgun surgery
       - happens when every time you make a subclass of one class, you
         have to make a subclass of another.
       - use /Move Method/ and /Move Field/
     - *Lazy Class*
       - a class that isn't doing enough to pay for its existence
         should be eliminated.
       - use /Collapse Hierarchy/ or /Inline Class/
     - *Speculative Generality*
       - when speculative hooks and features are added that aren't
         necessary yet.
       - to get rid of abstract classes use /Collapse Hierarchy/
       - unnescessary delegation can be removed with /Inline Class/
       - Methods with unused params should be handled with /Remove
         Parameter/
       - Methods with odd abstract names should be handled with
         /Rename Method/
     - *Temporary Field*
       - when an instance variable is set only in certain circumstances
       - use /Extract Class/ to create a home for the orphan variables
     - *Message Chains*
       - when a client asks one object for another object, which the
         client then asks for yet another object, etc.
       - use /Hide Delegate/
     - *Middle Man*
       - when too many class methods are delegating tasks to another
         class
       - use /Remove Middle Man/
     - *Inappropriate Intimacy*
       - when classes delve into other classes private data
       - use /Move Method/ and /Move Field/
     - *Alternative Classes with Different Interfaces*
       - use /Rename Method/ on any methods that do the same thing but
         have different signatures for what they do.
     - *Incomplete Library Class*
       - use /Introduce Foreign Method/ to add methods you wish the
         library class had
       - use /Introduce Local Extension/ if there are many of these
         methods.
     - *Data Class*
       - Classes that have fields, getters and setters, and nothing
         else
       - use /Encapsulate Field/
     - *Refused Bequest*
       - when subclasses don't need all/most of the methods and data of
         their parents
       - (also consider the pull up method for the opposite problem,
         to move code into the superclass)
       - use /Push Down Method/ and /Push Down Field/ to push all the
         unused methods to the sibling.
     - *Comments*
       - when thick comments are an indicator of bad code
       - when you need a comment to explain what a block of code does,
         try /Extract Method/
** DONE Testing Basics
   - Executing a program in an attempt to determine whether it behaves
     as expected
   - Goal is to find bugs, /not/ prove correctness
   - *Failure*: when there is a difference between the actual output
     and the expected output (as reported by the *test oracle*)
   - *Error*: deviation in internal state (from correct state) that
     led to failure
   - *Fault*: static defect in code that led to error
   - *Test Case Generation*
     - *Exhaustive testing*: all possible inputs. generally not
       feasible
     - *Random testing*: choose inputs randomly
       - easy to automate
       - no indication of progress
       - hard to know expected outputs
     - *Coverage-based*: identify a quantifiable criteria and generate
       tests that achieve adequate coverage level
       - *Black-Box Testing*: try to find test cases that cover as
         much of the /specification (I/O) space/ as possible
         - equivalence classes
         - robustness cases
         - boundary conditions
       - *White-Box Testing*: try to find test cases that cover as
         much of the /code/ as possible.
     - *Fault-based*: show that program does not exhibit certain types
       of faults
** TODO Black-Box Testing
   - *Criteria*: how much of the *specification* is covered
   - *Assumptions*
     1. if a failure is revealed for a given value of input variable
        =v=, then it is likely to be revealed for similar values of
        =v=
        - as a result of this assumption, we can split up the
          specification space into *equivalence classes*
     2. if a failure is revealed for a given value of input variable
        =v=, then it is likely to be revealed regardless of the value
        of other variables (single fault assumption)
   - Boundary value: for each variable, hold others at a normal value,
     and test min, min+, max, max-, norm
     - To test robustness, add min- and max+
   - Worst case testing: like boundary, but without single fault
     assumption; test boundaries simultaneously
   - Weak-normal: single fault, n = classes in partition with largest number of subsets
     - Weak robust: test weak-normal, and one invalid for each var
   - Strong normal: multiple fault, cartesian product
     - Strong robust: test invalid in addition to above

** TODO White-Box Testing
   - /"Treat the code as a graph and try to cover it"/
   - tests internal structures of an applications as opposed to its
     functionality
   - *Control flow graph*: representation, using grpah notation, of
     all paths that might be traversed through a program during its
     execution.
   - *Coverage metrics*
     - *Statement*: a measure of the percentage of statements that
       have been executed by test cases. Every statement executed at
       least once
     - *Branch*: a measure of the percentage of the decisions points
       (boolean expressions) of the program that have been evaluated
       as both true and false in test cases. Every branch executed at
       least once
     - *Path*: a measure of the percentage of control paths taken.
       - path coverage subsumes statement and branch coverage. if
         you've covered 100% of the paths, you've covered 100% of the
         statements and branches. Every path executed at least once
** TODO Debugging
   - Levels of fault localization: deduction, observation, induction, experimentation
   - Fault localization using scientific method: gather evidence, form
     hypothesis, try to disprove hypothesis, repeat
   - Black-box debugging: based on equivalence classes
   - White-box debugging: based on code covearge (slicing and dicing)
   - Regression testing

* Exam format
  - Answer multiple choice questions
  - Answer problem solving questions
  - Write and modify java code
    - Refactor
    - Defensive programming
    - Threads

* Preparing for the exam
** TODO Look at practice questions and solutions
** TODO Review midterm solutions
** TODO Review lecture notes
** TODO Reading assignments
** TODO Create study sheet
** DONE Look at Piazza
   CLOSED: [2015-05-05 Tue 00:24]
** TODO Look at last semester's cheat sheet
** DONE draw and interpret control graphs
   CLOSED: [2015-05-05 Tue 00:25]
* To include on cheat sheet
** TODO Second semester material
   - List of code smells and refactoring testability
** TODO Material from first semester
   - Process models and their steps
     - RUP: inception, elaboration, construction, transition
   - Requirements
     - Functional
     - Non-functional
   - Software engineering definitions
     - Software engineering: a disciplined, systematic, quantifiable,
       approach to developing software
   - Essential and accidental difficulties
     - Essential: changeability, complexity, conformity, invisibility
   - Quality (ISO 9126)
     - Internal (maintainability): analyzability, changeability, stability, testability
       (reusability)
     - External: functionality, reliability, efficiency, usability, portability
   - Relationships: association, composition, aggregation, dependency, realization, generalization
   - Design patterns and descriptions
     - Decorator
     - Bridge
     - Observer
     - Factory method
     - Singleton
     - Strategy
